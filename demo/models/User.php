<?php

namespace app\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id ID пользователя
 * @property string $username Логин
 * @property string $fio ФИО
 * @property string $email Почта
 * @property string $phone Телефон
 * @property string $password Пароль
 * @property int $role Роль (Админ (1)/Пользователь (0))
 *
 * @property Statement[] $statements
 */
class User extends \yii\db\ActiveRecord implements IdentityInterface
{
    public $passwordRepeat;
    public $check;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['username', 'fio', 'email', 'phone', 'password', 'passwordRepeat', 'check'], 'required', 'message' => 'Пожалуйста заполните поля!'],
            [['role'], 'integer'],
            [['username', 'fio', 'email', 'password'], 'string', 'max' => 255],
            [['phone'], 'string', 'max' => 60],
            [['username'], 'unique'],
            [['email'], 'unique'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => 'Логин',
            'fio' => 'ФИО',
            'email' => 'Почта',
            'phone' => 'Телефон',
            'password' => 'Пароль',
            'passwordRepeat' => 'Подтверждение пароля',
            'check' => 'Согласен на что-то!',
            'role' => 'Role',
        ];
    }

    /**
     * Gets query for [[Statements]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getStatements()
    {
        return $this->hasMany(Statement::class, ['id_user' => 'id']);
    }

    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        return null;

    }

    public function getId()
    {
        return $this->id;

    }

    public function getAuthKey()
    {
        return null;

    }

    public function validateAuthKey($authKey)
    {
        return null;
    }

    public static function findByUsername($username)
    {
        return User::findOne(['username' => $username]);
    }

    public function validatePassword($password)
    {
        return $this->password === md5($password);
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord)
        {
            return $this->password = md5($this->password);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function isAdmin()
    {
        return $this->role === 1;
    }

}
